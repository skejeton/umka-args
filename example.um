import "args.um"

fn main() {
    args := args::mk("Your program", "1.0.0", "Here goes description of your program.", args::stdargv())

    // Works on various types automatically!
    var numeric: int
    var boolean: bool = true
    var list: []str
    var cutoff: []str
    var record: map[str]int
    var classifier: map[str][]int

    // Creates a help flag.
    args.help() 

    // You can also create custom modes.
    if args.mode("test", "Operation mode") {
        // Simple boolean switch.
        // Short flag allows you to use -b instead of --boolean.
        args.optional(&boolean, "boolean").short('b')
        // A required argument.
        // you can use *Next for positional arguments.
        args.requiredNext(&numeric, "numeric", "A simple number.")
        // Can insert into a map.
        args.optional(&record, "record", "Sets a key-value pair to a record.").short('r')
        // And can insert into a map of a list.
        args.optional(&classifier, "classifier", "Appends a number to a list of a key.")
        // Cutoff arguments, will be ignored and parsing will stop immediately, useful if you need to pass them to another program.
        args.requiredCutoff(&cutoff, "cutoff");

        // Validates the arguments for you.
        // Automatically shows generated help if no mode is specified.
        args.check()

        // If an error occured, the program would've exited before this point.
        //
        // For more advanced usage use `args.getusage()` to get the help string,
        // args.parse, to manually parse and retrieve the errors.
        printf("numeric: %v\n", numeric)
        printf("boolean: %v\n", boolean)
        printf("cutoff: %v\n", cutoff)
        printf("record: %v\n", record)
        printf("classifier: %v\n", classifier)
    } else {
        // Here we'll print the usage, if the `test` mode isn't selected.
        args.usage()
    }
}